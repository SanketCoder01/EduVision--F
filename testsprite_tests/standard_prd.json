{
  "meta": {
    "project": "EduVision Real Data System",
    "date": "2025-10-15",
    "prepared_by": "Generated by TestSprite"
  },
  "product_overview": "EduVision Real Data System is a comprehensive platform designed to enable educational institutions to dynamically manage student and faculty data, enforce mandatory registration, provide department and year-wise content delivery, and facilitate real-time notifications and updates across a wide range of academic modules including attendance, assignments, announcements, events, and study groups. The system ensures strict data security with Row Level Security (RLS) policies and offers seamless user experience with modern UI components.",
  "core_goals": [
    "Enforce complete registration for all users before granting access to dashboard modules.",
    "Enable department and year-based content segregation ensuring data privacy and access control.",
    "Eliminate static data lists by integrating dynamic data fetching of students and faculty from Supabase PostgreSQL.",
    "Provide real-time notification system for instant updates on academic content and activities.",
    "Offer seamless user interactions with reusable UI components like ImageCropper, StudentSelector, and NotificationBell.",
    "Implement a comprehensive database schema with performance optimizations and RLS for security.",
    "Support smooth integration with existing modules such as attendance, assignments, study groups, events, and announcements."
  ],
  "key_features": [
    "Complete multi-step registration system for students and faculty with detailed personal, academic, contact, family, bank, and document upload sections.",
    "Dynamic StudentSelector component allowing filtering by department and academic year with search and multi-selection.",
    "ImageCropper component for profile photo editing with crop, zoom, and rotate functionalities.",
    "Real-time notification infrastructure with NotificationBell component showing unread counts and live updates.",
    "Robust backend APIs for completing profile registration and updating profile photos.",
    "Optimized PostgreSQL functions and RLS policies enforcing department-based access control and registration completion verification.",
    "Automatic notification triggers on content posting enabling instant notification broadcast to targeted students.",
    "Comprehensive integration guide and templates for hooking into modules with real-time student data and notifications."
  ],
  "user_flow_summary": [
    "User completes registration upon first login via a detailed multi-step form collecting personal, academic, and other essential data.",
    "Faculty, after registration, can create content (e.g., attendance, assignments) targeting departments and years using dynamic StudentSelector.",
    "Upon posting new content, the system creates notifications that are instantly broadcasted to target students via real-time subscriptions.",
    "Students receive notifications using NotificationBell and view relevant contents only for their department and academic year after completing registration.",
    "Users can update profile photos using the ImageCropper component to crop and adjust images before saving.",
    "Dashboard modules remain locked until registration is marked complete in the system, with appropriate banners prompting users.",
    "Security is enforced by Row Level Security and department hierarchy rules ensuring only authorized access at all points."
  ],
  "validation_criteria": [
    "Registration cannot be bypassed; all users must complete their profiles to unlock dashboard modules.",
    "RLS policies correctly restrict faculty to their accessible departments and prevent unauthorized access.",
    "Dynamic student lists update accurately according to department and year filters without fallback to static data.",
    "Notifications are created on content posting and delivered instantly to the correct set of students based on department and year.",
    "Profile photo update API must correctly store and reflect changes with image cropping applied.",
    "All reusable components (StudentSelector, ImageCropper, NotificationBell) function with their documented props and expected UI behavior.",
    "Performance optimizations via SQL indexes and bulk notification inserts work under typical and high loads.",
    "System passes integration tests verifying real-time updates appear on student dashboards without page reloads.",
    "Security features including department hierarchy checks, registration completion flags, and access controls are enforced in the database and code.",
    "Dashboard UI shows proper locked states and notification badges based on user registration and unread notifications."
  ],
  "code_summary": {
    "tech_stack": [
      "TypeScript",
      "Next.js 14",
      "React 18",
      "Supabase (PostgreSQL)",
      "Tailwind CSS",
      "Framer Motion",
      "Radix UI",
      "Recharts",
      "React Hook Form",
      "Zod Validation"
    ],
    "features": [
      {
        "name": "Profile Completion API",
        "description": "Complete user registration with profile data including department, year, PRN, and face image",
        "files": [
          "app/api/profile/complete/route.ts",
          "app/complete-profile/page.tsx"
        ],
        "api_doc": {
          "openapi": "3.0.0",
          "paths": {
            "/api/profile/complete": {
              "post": {
                "summary": "Complete user profile registration",
                "requestBody": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "type": "object",
                        "required": [
                          "user_id",
                          "email",
                          "name",
                          "user_type",
                          "department"
                        ],
                        "properties": {
                          "user_id": {
                            "type": "string",
                            "format": "uuid"
                          },
                          "email": {
                            "type": "string",
                            "format": "email"
                          },
                          "name": {
                            "type": "string"
                          },
                          "user_type": {
                            "type": "string",
                            "enum": [
                              "student",
                              "faculty"
                            ]
                          },
                          "department": {
                            "type": "string"
                          },
                          "year": {
                            "type": "string",
                            "enum": [
                              "first",
                              "second",
                              "third",
                              "fourth"
                            ]
                          },
                          "prn": {
                            "type": "string"
                          },
                          "phone": {
                            "type": "string"
                          },
                          "address": {
                            "type": "string"
                          },
                          "face_image": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  }
                },
                "responses": {
                  "200": {
                    "description": "Profile completed successfully"
                  }
                }
              }
            }
          }
        }
      },
      {
        "name": "Profile Photo Update API",
        "description": "Update user profile picture with cropped image",
        "files": [
          "app/api/profile/update-photo/route.ts"
        ],
        "api_doc": {
          "openapi": "3.0.0",
          "paths": {
            "/api/profile/update-photo": {
              "post": {
                "summary": "Update profile photo",
                "requestBody": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "type": "object",
                        "required": [
                          "user_id",
                          "photo"
                        ],
                        "properties": {
                          "user_id": {
                            "type": "string",
                            "format": "uuid"
                          },
                          "photo": {
                            "type": "string",
                            "description": "Base64 encoded image"
                          },
                          "user_type": {
                            "type": "string",
                            "enum": [
                              "student",
                              "faculty"
                            ]
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      {
        "name": "Student Data Service",
        "description": "Fetch students dynamically by department and year for faculty operations",
        "files": [
          "lib/student-data-service.ts"
        ],
        "api_doc": {
          "description": "Client-side service for querying student data from Supabase",
          "methods": [
            "getStudentsByDepartment(dept: string)",
            "getStudentsByDepartmentAndYear(dept: string, year: string)",
            "getStudentsByDepartmentAndYears(dept: string, years: string[])",
            "searchStudents(query: string, dept?: string, year?: string)",
            "getDepartmentStats(dept: string)",
            "getStudentsForFaculty(facultyDept: string)"
          ]
        }
      },
      {
        "name": "Notification Service",
        "description": "Real-time notification system for students when faculty posts content",
        "files": [
          "lib/notification-service.ts"
        ],
        "api_doc": {
          "description": "Client-side service for managing real-time notifications",
          "methods": [
            "createNotificationsForStudents(contentType, contentId, dept, years, title, message)",
            "getUnreadNotifications(userId: string)",
            "subscribeToNotifications(userId: string, callback: Function)",
            "markNotificationAsRead(notificationId: string)",
            "getUnreadCount(userId: string)"
          ]
        }
      },
      {
        "name": "Image Cropper Component",
        "description": "Profile picture editing with crop, zoom, rotate functionality",
        "files": [
          "components/ImageCropper.tsx"
        ],
        "api_doc": {
          "description": "React component for image editing",
          "props": {
            "open": {
              "type": "boolean"
            },
            "onClose": {
              "type": "function"
            },
            "onSave": {
              "type": "function",
              "params": [
                "croppedImage: string"
              ]
            },
            "currentImage": {
              "type": "string",
              "optional": true
            }
          }
        }
      },
      {
        "name": "Student Selector Component",
        "description": "Dynamic student selection component with filters and search",
        "files": [
          "components/StudentSelector.tsx"
        ],
        "api_doc": {
          "description": "React component for selecting students",
          "props": {
            "department": {
              "type": "string",
              "optional": true
            },
            "years": {
              "type": "array",
              "items": "string",
              "optional": true
            },
            "selectedStudents": {
              "type": "array",
              "items": "string"
            },
            "onSelectionChange": {
              "type": "function",
              "params": [
                "studentIds: string[]"
              ]
            },
            "multiSelect": {
              "type": "boolean",
              "default": true
            },
            "showFilters": {
              "type": "boolean",
              "default": true
            },
            "title": {
              "type": "string",
              "optional": true
            }
          }
        }
      },
      {
        "name": "Notification Bell Component",
        "description": "Real-time notification dropdown with unread count badge",
        "files": [
          "components/NotificationBell.tsx"
        ],
        "api_doc": {
          "description": "React component for displaying notifications",
          "props": {
            "userId": {
              "type": "string",
              "required": true
            },
            "userType": {
              "type": "string",
              "enum": [
                "student",
                "faculty",
                "dean"
              ],
              "required": true
            }
          }
        }
      },
      {
        "name": "Faculty Profile Page",
        "description": "Faculty profile viewing and editing with image cropper integration",
        "files": [
          "app/dashboard/profile/page.tsx"
        ],
        "api_doc": {
          "description": "Faculty profile management page with edit functionality"
        }
      },
      {
        "name": "Student Profile Page",
        "description": "Student profile viewing with comprehensive information display",
        "files": [
          "app/student-dashboard/profile/page.tsx"
        ],
        "api_doc": {
          "description": "Student profile display page"
        }
      },
      {
        "name": "Database Functions",
        "description": "PostgreSQL functions for student queries and notifications",
        "files": [
          "supabase/migrations/300_comprehensive_real_data_system.sql"
        ],
        "api_doc": {
          "description": "SQL functions and triggers",
          "functions": [
            "get_students_by_dept_year(p_department TEXT, p_years TEXT[])",
            "get_department_stats(p_department TEXT)",
            "notify_new_content() TRIGGER",
            "create_notifications_for_content() TRIGGER"
          ]
        }
      },
      {
        "name": "Attendance System",
        "description": "Real-time attendance tracking with face verification and location validation",
        "files": [
          "app/dashboard/attendance/create/page.tsx",
          "app/dashboard/attendance/settings/page.tsx",
          "app/student-dashboard/attendance/page.tsx"
        ],
        "api_doc": {
          "description": "Complete attendance management system with real-time updates"
        }
      },
      {
        "name": "Assignment System",
        "description": "Assignment creation, submission, and grading with notifications",
        "files": [
          "app/dashboard/assignments/create/page.tsx",
          "app/student-dashboard/assignments/page.tsx"
        ],
        "api_doc": {
          "description": "Assignment management with target year filtering"
        }
      },
      {
        "name": "Study Groups",
        "description": "Collaborative study group management with task assignment",
        "files": [
          "app/dashboard/study-groups/create/page.tsx",
          "app/student-dashboard/study-groups/page.tsx"
        ],
        "api_doc": {
          "description": "Study group creation and management"
        }
      },
      {
        "name": "Announcements",
        "description": "Department and year-specific announcements with notifications",
        "files": [
          "app/dashboard/announcements/create/page.tsx",
          "app/student-dashboard/announcements/page.tsx"
        ],
        "api_doc": {
          "description": "Announcement broadcasting system"
        }
      },
      {
        "name": "Events Management",
        "description": "Event creation and registration tracking",
        "files": [
          "app/dashboard/events/create/page.tsx",
          "app/student-dashboard/events/page.tsx"
        ],
        "api_doc": {
          "description": "Event management with RSVP tracking"
        }
      },
      {
        "name": "Today's Hub",
        "description": "Centralized notification and activity feed",
        "files": [
          "app/dashboard/todays-hub/page.tsx",
          "app/student-dashboard/todays-hub/page.tsx"
        ],
        "api_doc": {
          "description": "Real-time activity feed with notifications"
        }
      }
    ]
  }
}
